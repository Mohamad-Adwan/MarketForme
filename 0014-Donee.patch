From 3ded95b326cd3161d965e831443956fa63415c29 Mon Sep 17 00:00:00 2001
From: Mohamad-Adwan <s1202827@stu.najah.edu>
Date: Mon, 21 Apr 2025 09:55:02 +0300
Subject: [PATCH 14/14] Donee

---
 README.md | 252 ++++++++++++++++++++++++++++++++++++++----------------
 1 file changed, 177 insertions(+), 75 deletions(-)

diff --git a/README.md b/README.md
index b9fc1d8..eafa386 100644
--- a/README.md
+++ b/README.md
@@ -1,99 +1,181 @@
 
-# ShopEase E-Commerce Application
+# üõçÔ∏è Tech-Shop E-Commerce Application
+
+An online shopping platform for modern e-commerce experiences built with [your stack here, e.g., Node.js + Express + React + Mongoodb].
+
+
+## üìö Table of Contents
+
+- [Database Schema](#1-database-Schema)
+- [API Endpoints](#2-api-setup)
+- [Configuration](#3-configuration)
+- [Running the Application](#4-running-the-application)
+- [Note](#5-Note)
+
+## üîß Tech Stack
+
+- Frontend: React, TailwindCSS 
+- Backend: Node.js, Express 
+- Database: MongooDB
+- Auth: JWT
+
+## ‚ú® Features
+
+- User authentication & registration
+- User Email Verification And Number Verification Using Whatsapp 
+- Product listing and categories
+- Add to cart and manage cart
+- Place orders and view history
+- Tracking Order Status
+- Printing Invoice
+- Filtring Search on product
+- Admin Dasdashboard
 
 ## Local Database Setup
 
 ### 1. Database Schema
+## 1. üì¶ Database Collections (MongoDB)
+
+### üõçÔ∏è `products` Collection
+
+```js
+{
+  id: Number,
+  name: String,
+  description: String,
+  price: Number,
+  discountprice:Number,
+  image: {
+    data: Buffer,
+    contentType: String,
+    FileName: String,
+  },
+  category: String,
+  featured: Boolean,
+  stock: Number
+}
 
-Create the following tables in your database:
-
-#### Products Table
-```sql
-CREATE TABLE products (
-  id INT PRIMARY KEY AUTO_INCREMENT,
-  name VARCHAR(255) NOT NULL,
-  description TEXT,
-  price DECIMAL(10, 2) NOT NULL,
-  image VARCHAR(255),
-  category VARCHAR(100),
-  featured BOOLEAN DEFAULT FALSE,
-  stock INT NOT NULL DEFAULT 0
-  
-);
-```
-
-#### Users Table
-```sql
-CREATE TABLE users (
-  id VARCHAR(36) PRIMARY KEY,
-  name VARCHAR(255) NOT NULL,
-  email VARCHAR(255) NOT NULL UNIQUE,
-  password VARCHAR(255) NOT NULL, -- Store hashed passwords only!
-  role ENUM('admin', 'user') DEFAULT 'user',
-  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-);
-```
-
-#### Cart Items Table
-```sql
-CREATE TABLE cart_items (
-  id INT PRIMARY KEY AUTO_INCREMENT,
-  user_id VARCHAR(36) NOT NULL,
-  product_id INT NOT NULL,
-  quantity INT NOT NULL DEFAULT 1,
-  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
-  FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE,
-  UNIQUE(user_id, product_id)
-);
-```
-
-#### Orders Table
-```sql
-CREATE TABLE orders (
-  id INT PRIMARY KEY AUTO_INCREMENT,
-  user_id VARCHAR(36) NOT NULL,
-  date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
-  status ENUM('pending', 'processing', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
-  total DECIMAL(10, 2) NOT NULL,
-  FOREIGN KEY (user_id) REFERENCES users(id)
-);
-```
-
-#### Order Items Table
-```sql
-CREATE TABLE order_items (
-  id INT PRIMARY KEY AUTO_INCREMENT,
-  order_id INT NOT NULL,
-  product_id INT NOT NULL,
-  quantity INT NOT NULL,
-  price DECIMAL(10, 2) NOT NULL,
-  FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
-  FOREIGN KEY (product_id) REFERENCES products(id)
-);
+```
+### üë§ `User` Collection
+
+```js
+{
+  id: Number,
+  name: String,
+  email: String,
+  phone: Number,
+  password: String, 
+  role: "admin" | "user",
+  emailVerified: Boolean,
+  verificationCode: String,
+  phoneVerified: Boolean,
+  resetCode: String,
+  ordersCount: Number,
+  created_at: Date
+}
+```
+### üõí `Cart Items` Collection
+```js
+userId: String,
+  items: [
+    {
+      id: String, 
+      quantity: Number,
+      price: Number,
+      image: {
+        data: Buffer,
+        contentType: String,
+        FileName: String,
+      },
+      itemname:String,
+    }
+  ]
+```
+### üì¶ `Orders` Collection
+```js
+{
+  id: Number,
+  userName: String,
+price: Number,
+total: Number,
+phone: Number,
+  userId: Number,
+items: [
+    {
+      productId: Number, 
+      quantity: Number, 
+      price: Number,
+      image: {
+        data: Buffer, 
+        contentType: String,
+        FileName: String
+      },
+      itemname:  String ,
+    }
+
+  ],
+  status: { type: String, default: "pending" ,enum:['pending', 'processing', 'shipped', 'delivered', 'cancelled'] },
+  date: Date,
+}
+
+```
+###  `Global` Collection
+```js
+ showPrice: {
+     Boolean
+     }
 ```
 
 ### 2. API Setup
 
 You'll need to create a REST API that supports the following endpoints:
-
-- `GET /api/products` - Get all products
-- `GET /api/products/:id` - Get a product by ID
-- `GET /api/products/featured` - Get featured products
-- `GET /api/products/category/:category` - Get products by category
-
+```
+- `GET /api/product/` - Get all products
+- `GET /api/product/:id` - Get a product by ID
+- `GET /api/product/featured` - Get featured products
+- `GET /api/product/category/:category` - Get products by category
+- `GET /api/product/Dasdashboard` - Get Dasdashboard
+- `DELETE /api/product/:id` - Delete products by id
+```
+```
 - `POST /api/auth/login` - Login
 - `POST /api/auth/register` - Register
 - `GET /api/auth/user` - Get current user
-
+- `GET /api/auth/users` - Get All users
+- `GET /api/auth/user/userId` - Get user by ID
+- `POST /api/auth/verify-email` - Verify Email
+- `POST /api/auth/verify-phone` - Verify Phone
+- `POST /api/auth/send-phone-verification` - Send Phone Verification
+- `POST /api/auth/registerWithPhone` - Register With Phone 
+- `POST /api/auth/forgot-password` - Forgot Password
+- `POST /api/auth/reset-password` - Reset Password
+- `PUT /api/auth/user-role` - Update User Role
+- `DELETE /api/user/:userId` - Delete user by id
+- `GET /api/user/Dasdashboard` - Get Dasdashboard
+```
+```
 - `GET /api/cart/:userId` - Get cart
 - `POST /api/cart/:userId` - Add to cart
 - `PUT /api/cart/:userId/item/:productId` - Update cart item
 - `DELETE /api/cart/:userId/item/:productId` - Remove from cart
-- `DELETE /api/cart/:userId/clear` - Clear cart
-
+- `DELETE /api/cart/clear/:userId` - Clear cart
+```
+```
 - `GET /api/orders/:userId` - Get orders
+- `GET /api/orders/detail/:orderId` - Get orders by ID
+- `GET /api/order/Dasdashboard` - Get Dasdashboard
 - `POST /api/orders` - Create order
+- `PUT  /api/orders/status/:orderId` - Update order Status
+- `PUT /api/orders/edit/item/:itemId` - Edit Item Quantity
+- `DELETE /api/orders/:orderId` - Delete order
+- `DELETE /api/orders/item/:itemId` - Delete Item from order
+```
+```
+- `PUT /api/global/putpriceState` Change price State show or not
+- `GET /api/global/getpriceState` Get State
+- `GET api/global/printPDF` printPDF order
 
+```
 ### 3. Configuration
 
 Update the API URL in `src/config/dbConfig.ts` to point to your local API server.
@@ -110,3 +192,23 @@ npm run dev
 # In a separate terminal, start your API server
 # (command will depend on your API implementation)
 ```
+### 5. Note
+```bash
+#Dont Forget to add this to you .git file
+PORT=
+JWT_SECRET=
+DB_HOST=
+DB_PORT=
+DB_NAME=
+DB_USER=
+DB_PASSWORD=
+DATABASE_URL=mongodb:
+production=
+EMAIL_PASS=
+EMAIL_USER=
+TWILIO_ACCOUNT_SID=
+TWILIO_AUTH_TOKEN=
+TWILIO_PHONE_NUMBER= 
+TWILIO_CONTENT_SID= 
+
+```
-- 
2.45.1.windows.1

