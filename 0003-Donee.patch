From b6b7c1cddc0dd24b7e26ff59ddc5f03d261ebc0c Mon Sep 17 00:00:00 2001
From: Mohamad-Adwan <s1202827@stu.najah.edu>
Date: Sun, 13 Apr 2025 17:08:14 +0300
Subject: [PATCH 03/14] Donee

---
 backend/controllers/authController.js  | 18 +++--
 backend/controllers/orderController.js |  5 +-
 backend/package-lock.json              | 15 +++++
 backend/package.json                   |  1 +
 backend/routes/authRoutes.js           | 19 +++++-
 src/components/LoginModal.tsx          | 33 ++++++++--
 src/components/ResetPasswordForm.tsx   | 21 +++++-
 src/pages/OrdersPage.tsx               | 91 +++-----------------------
 8 files changed, 108 insertions(+), 95 deletions(-)

diff --git a/backend/controllers/authController.js b/backend/controllers/authController.js
index bed5e74..4279454 100644
--- a/backend/controllers/authController.js
+++ b/backend/controllers/authController.js
@@ -300,6 +300,7 @@ const jwt = require('jsonwebtoken');
 const crypto = require('crypto');
 const sendEmail = require('../mailer'); // Import the mailer utility
 const { NumberVerification } = require("../twilio");
+const bcrypt = require('bcrypt');
 // Generate JWT token
 const generateToken = (user) => {
   return jwt.sign(
@@ -326,7 +327,11 @@ const authController = {
       }
       
       const isPasswordValid = await user.comparePassword(password);
-      
+      // const isPasswordValid = await bcrypt.compare(password, user.password);
+      // console.log(password)
+      // console.log(user.password)
+      // console.log(isPasswordValid)
+
       if (!isPasswordValid) {
         return res.status(401).json({ error: 'Invalid credentials' });
       }
@@ -359,11 +364,15 @@ const authController = {
       
       const existingUser = await User.findOne({ email });
       
-      if (existingUser) {
+      if (existingUser ) {
+        if(!existingUser.emailVerified)
+          {
+            return res.status(409).json({ error: 'User email not Verified' });
+        }
         return res.status(409).json({ error: 'User already exists' });
       }
       //const generateVerificationCode = () => Math.floor(100000 + Math.random() * 900000); // Random 6-digit code
-
+      // const hashedPassword = await bcrypt.hash(password, 10);
       const verificationCode = crypto.randomBytes(3).toString('hex');
       const subject = 'Verify Your Email Address';
       const text = `Your verification code is: ${verificationCode}`;
@@ -449,7 +458,8 @@ const authController = {
       if (user.resetCode !== code) {
         return res.status(400).json({ error: 'Invalid reset code' });
       }
-      
+      // const hashedPassword = await bcrypt.hash(newPassword, 10);
+
       user.password = newPassword;
       user.resetCode = null;
       await user.save();
diff --git a/backend/controllers/orderController.js b/backend/controllers/orderController.js
index bf02bb5..a7c125f 100644
--- a/backend/controllers/orderController.js
+++ b/backend/controllers/orderController.js
@@ -168,11 +168,10 @@ const {Product} = require('../models/productModel'); // Assuming you have a Prod
 const orderController = {
   // Get all orders for a specific user
   getOrders: async (req, res) => {
-    const  userId  = req.params.id; // id here is the userId
+    const  userId  = req.params.userId; // id here is the userId
   
     try {
-      const orders = await Order.find({ nuser_Id:userId});
-  
+      const orders = await Order.find({ userId:userId});
       if (!orders || orders.length === 0) {
         return res.status(404).json({ message: 'No orders found for this user' });
       }
diff --git a/backend/package-lock.json b/backend/package-lock.json
index b0e855e..a4eeeca 100644
--- a/backend/package-lock.json
+++ b/backend/package-lock.json
@@ -12,6 +12,7 @@
         "cors": "^2.8.5",
         "dotenv": "^16.3.1",
         "express": "^4.21.2",
+        "express-rate-limit": "^7.5.0",
         "jsonwebtoken": "^9.0.0",
         "multer": "^1.4.5-lts.2",
         "uuid": "^9.0.0"
@@ -566,6 +567,20 @@
         "url": "https://opencollective.com/express"
       }
     },
+    "node_modules/express-rate-limit": {
+      "version": "7.5.0",
+      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.5.0.tgz",
+      "integrity": "sha512-eB5zbQh5h+VenMPM3fh+nw1YExi5nMr6HUCR62ELSP11huvxm/Uir1H1QEyTkk5QX6A58pX6NmaTMceKZ0Eodg==",
+      "engines": {
+        "node": ">= 16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/express-rate-limit"
+      },
+      "peerDependencies": {
+        "express": "^4.11 || 5 || ^5.0.0-beta.1"
+      }
+    },
     "node_modules/fill-range": {
       "version": "7.1.1",
       "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
diff --git a/backend/package.json b/backend/package.json
index ce42c77..2e059ef 100644
--- a/backend/package.json
+++ b/backend/package.json
@@ -12,6 +12,7 @@
     "cors": "^2.8.5",
     "dotenv": "^16.3.1",
     "express": "^4.21.2",
+    "express-rate-limit": "^7.5.0",
     "jsonwebtoken": "^9.0.0",
     "multer": "^1.4.5-lts.2",
     "uuid": "^9.0.0"
diff --git a/backend/routes/authRoutes.js b/backend/routes/authRoutes.js
index fe63917..cab0fa6 100644
--- a/backend/routes/authRoutes.js
+++ b/backend/routes/authRoutes.js
@@ -2,9 +2,24 @@
 const express = require('express');
 const router = express.Router();
 const authController = require('../controllers/authController');
-
+const rateLimit = require('express-rate-limit');
+// const loginLimiter = rateLimit({
+//     windowMs: 5 * 60 * 1000, // 5 minutes
+//     max: 10, // Limit each IP to 10 login attempts per windowMs
+//     handler: (req, res) => {
+//       // Calculate the remaining time in seconds
+//       const retryAfter = req.rateLimit.resetTime
+//         ? Math.ceil((req.rateLimit.resetTime.getTime() - Date.now()) / 1000)
+//         : 'a few seconds';
+  
+//       res.status(429).json({
+//         error: 'Too many login attempts. Please try again later.',
+//         retryAfter: retryAfter > 0 ? `${retryAfter} seconds` : 'a few seconds',
+//       });
+//     },
+//   });
 // Login
-router.post('/login', authController.login);
+router.post('/login'/*,loginLimiter*/, authController.login);
 
 // Register
 router.post('/register', authController.register);
diff --git a/src/components/LoginModal.tsx b/src/components/LoginModal.tsx
index b770fc4..83c825c 100644
--- a/src/components/LoginModal.tsx
+++ b/src/components/LoginModal.tsx
@@ -76,11 +76,30 @@ useEffect(() => {
 
   const handleRegisterSubmit = async (e: React.FormEvent) => {
     e.preventDefault();
-    
     if (registerPassword !== confirmPassword) {
       toast.error('Passwords do not match');
       return;
     }
+    if (registerPassword.length < 8) {
+      toast.error('Password must be at least 8 characters long.');
+      return;
+    }
+    if (!/[a-z]/.test(registerPassword)) {
+      toast.error('Password must include at least one lowercase letter.');
+      return;
+    }
+    if (!/[A-Z]/.test(registerPassword)) {
+      toast.error('Password must include at least one uppercase letter.');
+      return;
+    }
+    if (!/\d/.test(registerPassword)) {
+      toast.error('Password must include at least one number.');
+      return;
+    }
+    if (!/[@$!%*?&]/.test(registerPassword)) {
+      toast.error('Password must include at least one special character (e.g., @$!%*?&).');
+      return;
+    }
     
     setIsLoading(true);
     
@@ -95,11 +114,17 @@ useEffect(() => {
       setCurrentView('emailVerification');
     } catch (error) {
       const errorMessage = error instanceof Error ? error.message : 'Registration failed';
-      toast.error(errorMessage);
+      //toast.error(errorMessage);
       console.error('Registration error:', error);
-      if (errorMessage.includes('already exists')) {
+      if(errorMessage.includes('email not Verified')){
         setVerificationEmail(registerEmail);
-       setCurrentView('emailVerification')
+        setCurrentView('emailVerification')
+        toast.error("Email need Verification");
+
+        // toast.error(errorMessage);
+      }
+      if (errorMessage.includes('already exists')) {
+        toast.info("You Can Login Email Registered And Verifieded")
       }
     } finally {
       setIsLoading(false);
diff --git a/src/components/ResetPasswordForm.tsx b/src/components/ResetPasswordForm.tsx
index 47e4c95..ca293bf 100644
--- a/src/components/ResetPasswordForm.tsx
+++ b/src/components/ResetPasswordForm.tsx
@@ -34,7 +34,26 @@ const ResetPasswordForm: React.FC<ResetPasswordFormProps> = ({
       toast.error('Passwords do not match');
       return;
     }
-    
+    if (newPassword.length < 8) {
+          toast.error('Password must be at least 8 characters long.');
+          return;
+        }
+        if (!/[a-z]/.test(newPassword)) {
+          toast.error('Password must include at least one lowercase letter.');
+          return;
+        }
+        if (!/[A-Z]/.test(newPassword)) {
+          toast.error('Password must include at least one uppercase letter.');
+          return;
+        }
+        if (!/\d/.test(newPassword)) {
+          toast.error('Password must include at least one number.');
+          return;
+        }
+        if (!/[@$!%*?&]/.test(newPassword)) {
+          toast.error('Password must include at least one special character (e.g., @$!%*?&).');
+          return;
+        }
     setIsSubmitting(true);
     
     try {
diff --git a/src/pages/OrdersPage.tsx b/src/pages/OrdersPage.tsx
index 7912889..e570395 100644
--- a/src/pages/OrdersPage.tsx
+++ b/src/pages/OrdersPage.tsx
@@ -78,51 +78,20 @@ const OrdersPage = () => {
   //   }
   // }, [user]);
   const token =localStorage.getItem("authToken")
-  const { data: orders, isLoading, error, refetch } = useQuery({
-    queryKey: ['orders', user.id],
-    queryFn: () => user ? orderApi.getOrders(token,user.id) : Promise.resolve([]),
-    enabled: !!user && !useMockData,
-    meta: {
-      onError: (err: Error) => {
-        console.error('Error fetching orders:', err);
-        toast.error(err.message || 'Failed to load orders');
-      }
-    },
+  const { data: orders = [], isLoading, error, refetch } = useQuery({
+    queryKey: ['orders', user?.id],
+    queryFn: () => orderApi.getOrders(token, user.id),
+    enabled: !!user,
     retry: 1,
+    
   });
   
-  // Check if we should use mock data after the query fails
-  useEffect(() => {
-    if (error && !useMockData) {
-      setUseMockData(true);
-      toast.info('Using sample order data since the API is unavailable');
-    }
-  }, [error, useMockData]);
   
-  // Combine API orders, pending orders, and mock data
+  // Check if we should use mock data after the query fails
   const getDisplayOrders = () => {
-    if (useMockData && user) {
-      // Return mock orders with current user info
-      // return [...mockOrders.map(order => ({
-      //   ...order,
-      //   userId: user.id,
-      //   userName: user.name
-      // })), ...pendingOrders];
-    } else if (orders && pendingOrders.length > 0) {
-      // Return API orders + pending orders
-      console.log('API orders:', orders);
-      console.log('Pending orders:', pendingOrders);
-      return [...orders, ...pendingOrders];
-    } else if (orders) {
-      // Just API orders
-      console.log('API orders:', orders);
-
+     if (orders.length) {
       return orders;
-    } else if (pendingOrders.length > 0) {
-      // Just pending orders
-      console.log('Pending orders:', pendingOrders);
-      return pendingOrders;
-    }
+    } 
     return [];
   };
   
@@ -180,42 +149,7 @@ const OrdersPage = () => {
     );
   }
   
-  if (error && !useMockData && pendingOrders.length === 0) {
-    return (
-      <div className="container mx-auto px-4 py-8">
-        <Card>
-          <CardHeader>
-            <CardTitle>Error Loading Orders</CardTitle>
-            <CardDescription>There was a problem loading your orders. Please try again later.</CardDescription>
-          </CardHeader>
-          <CardContent className="space-y-4">
-            <Alert variant="destructive">
-              <AlertTitle>Connection Error</AlertTitle>
-              <AlertDescription>
-                We couldn't connect to our servers. This could be due to network issues or server maintenance.
-              </AlertDescription>
-            </Alert>
-            
-            <div className="flex flex-col gap-2 sm:flex-row">
-              <Button 
-                onClick={() => refetch()} 
-                className="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
-              >
-                Try Again
-              </Button>
-              
-              <Button 
-                onClick={() => setUseMockData(true)}
-                variant="outline"
-              >
-                View Sample Orders
-              </Button>
-            </div>
-          </CardContent>
-        </Card>
-      </div>
-    );
-  }
+ 
   
   return (
     <div className="container mx-auto px-4 py-8">
@@ -226,12 +160,7 @@ const OrdersPage = () => {
               <CardTitle>My Orders</CardTitle>
               <CardDescription>View your order history and track your purchases</CardDescription>
             </div>
-            {useMockData && (
-              <Badge className="bg-yellow-100 text-yellow-800">Sample Data</Badge>
-            )}
-            {pendingOrders.length > 0 && (
-              <Badge className="bg-blue-100 text-blue-800">Includes Pending Orders</Badge>
-            )}
+            
           </div>
         </CardHeader>
         <CardContent>
-- 
2.45.1.windows.1

