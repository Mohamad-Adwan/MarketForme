From b291288730c72c885cc105047b7fab9c4ab4bbdb Mon Sep 17 00:00:00 2001
From: Mohamad-Adwan <s1202827@stu.najah.edu>
Date: Tue, 15 Apr 2025 10:10:46 +0300
Subject: [PATCH 06/14] Donee

---
 backend/controllers/globalController.js     | 36 +++++++++++
 backend/controllers/orderController.js      |  1 +
 backend/models/globalModel.js               | 12 ++++
 backend/routes/globalRoutes.js              |  7 ++
 backend/server.js                           |  3 +-
 src/components/LoginModal.tsx               |  3 -
 src/components/ProductCard.tsx              | 22 +++++--
 src/components/admin/DashboardOverview.tsx  | 72 +++++++++++++++++++--
 src/components/admin/OrdersManagement.tsx   |  4 +-
 src/components/admin/ProductsManagement.tsx | 46 ++++++++++++-
 src/config/dbConfig.ts                      |  4 +-
 src/pages/ProductDetail.tsx                 | 19 +++++-
 src/services/apiService.ts                  | 14 ++++
 13 files changed, 221 insertions(+), 22 deletions(-)
 create mode 100644 backend/controllers/globalController.js
 create mode 100644 backend/models/globalModel.js
 create mode 100644 backend/routes/globalRoutes.js

diff --git a/backend/controllers/globalController.js b/backend/controllers/globalController.js
new file mode 100644
index 0000000..3ea748a
--- /dev/null
+++ b/backend/controllers/globalController.js
@@ -0,0 +1,36 @@
+const Global = require('../models/globalModel');
+
+const globalController = {
+  getstatus: async (req, res) => {
+    try {
+      const statuses = await Global.findOne(); // Only one expected
+      res.status(200).json({showPrice:statuses.showPrice});
+    } catch (err) {
+      console.error("Get Status Error:", err);
+      res.status(500).json({ error: "Failed to fetch global status" });
+    }
+  },
+
+  setstatus: async (req, res) => {
+    try {
+      const { status } = req.body;
+
+      let globalDoc = await Global.findOne();
+
+      if (!globalDoc) {
+        globalDoc = new Global({ showPrice: status });
+      } else {
+        globalDoc.showPrice = status;
+      }
+
+      await globalDoc.save();
+
+      res.status(200).json(globalDoc);
+    } catch (err) {
+      console.error("Set Status Error:", err);
+      res.status(500).json({ error: "Failed to update global status" });
+    }
+  },
+};
+
+module.exports = globalController;
diff --git a/backend/controllers/orderController.js b/backend/controllers/orderController.js
index a7c125f..66e86b8 100644
--- a/backend/controllers/orderController.js
+++ b/backend/controllers/orderController.js
@@ -576,6 +576,7 @@ const fullProductDetails = await Product.find({ id1: { $in: topProductIds } });
           total: order.total,
           status: order.status,
           date: order.date,
+          phone:order.phone,
           items: updatedItems
         };
       });
diff --git a/backend/models/globalModel.js b/backend/models/globalModel.js
new file mode 100644
index 0000000..63c41bb
--- /dev/null
+++ b/backend/models/globalModel.js
@@ -0,0 +1,12 @@
+// models/Settings.js
+const mongoose = require('mongoose');
+
+const globalsSchema = new mongoose.Schema({
+  showPrice: {
+    type: Boolean,
+    default: true,
+  },
+  // Add more global toggles if needed
+}, { timestamps: true });
+
+module.exports = mongoose.model('Settings', globalsSchema);
diff --git a/backend/routes/globalRoutes.js b/backend/routes/globalRoutes.js
new file mode 100644
index 0000000..072a63e
--- /dev/null
+++ b/backend/routes/globalRoutes.js
@@ -0,0 +1,7 @@
+const express = require('express');
+const router = express.Router();
+const globalController = require('../controllers/globalController.js');
+
+router.put('/putpriceState',globalController.setstatus);
+router.get('/getpriceState',globalController.getstatus);
+module.exports = router;
\ No newline at end of file
diff --git a/backend/server.js b/backend/server.js
index 71d544e..7fb4631 100644
--- a/backend/server.js
+++ b/backend/server.js
@@ -17,6 +17,7 @@ const productRoutes = require('./routes/productRoutes');
 const authRoutes = require('./routes/authRoutes');
 const cartRoutes = require('./routes/cartRoutes');
 const orderRoutes = require('./routes/orderRoutes');
+const globalRoutes = require('./routes/globalRoutes');
 
 const PORT = process.env.PORT || 3000;
 
@@ -41,7 +42,7 @@ app.use('/api/products', productRoutes);
 app.use('/api/auth', authRoutes);
 app.use('/api/cart', cartRoutes);
 app.use('/api/orders', orderRoutes);
-
+app.use('/api/global',globalRoutes)
 // Error handling middleware for database operations (uncomment when using a real database)
 app.use((err, req, res, next) => {
   console.error('Server error:', err);
diff --git a/src/components/LoginModal.tsx b/src/components/LoginModal.tsx
index 7060bc3..113ed88 100644
--- a/src/components/LoginModal.tsx
+++ b/src/components/LoginModal.tsx
@@ -15,9 +15,6 @@ import { Input } from '@/components/ui/input';
 import { useAuth } from '@/context/AuthContext';
 import { toast } from 'sonner';
 import { authApi } from '@/services/apiService';
-import { LuEye } from "react-icons/lu";
-import { LuEyeClosed } from "react-icons/lu";
-
 import ForgotPasswordForm from './ForgotPasswordForm';
 import ResetPasswordForm from './ResetPasswordForm';
 import EmailVerificationForm from './EmailVerificationForm';
diff --git a/src/components/ProductCard.tsx b/src/components/ProductCard.tsx
index 8ef1a78..52ce645 100644
--- a/src/components/ProductCard.tsx
+++ b/src/components/ProductCard.tsx
@@ -1,5 +1,5 @@
 
-import React, { useState } from 'react';
+import React, { useEffect, useState } from 'react';
 import { Link } from 'react-router-dom';
 import { Card, CardContent, CardFooter } from '@/components/ui/card';
 import { Button } from '@/components/ui/button';
@@ -8,7 +8,7 @@ import { useCart } from '@/context/CartContext';
 import { Product } from '@/types';
 import { Badge } from '@/components/ui/badge';
 import { useAuth } from '@/context/AuthContext';
-import { authApi, cartApi } from '@/services/apiService';
+import { authApi, cartApi, globalApi } from '@/services/apiService';
 
 interface ProductCardProps {
   product: Product;
@@ -18,6 +18,20 @@ const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
   const { addToCart } = useCart();
   const { user } = useAuth();
   const [isAdding, setIsAdding] = useState(false);
+  const [isOnoff, setisOnOff] = useState(false);
+  useEffect(() => {
+    const fetchStatus = async () => {
+      try {
+        const response = await globalApi.getStatus();
+        // Assuming response = { showPrice: true/false }
+        setisOnOff(response.showPrice || false);
+      } catch (error) {
+        console.error("Failed to fetch status:", error);
+      }
+    };
+
+    fetchStatus();
+  }, []);
   
   const handleAddToCart = async (e: React.MouseEvent) => {
     e.preventDefault();
@@ -55,10 +69,10 @@ const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
       
       <CardFooter className="flex flex-col items-stretch gap-2 mt-auto">
         <div className="flex justify-between items-center w-full">
-          {user ? (
+          {isOnoff ? (
             <span className="font-bold">${product.price.toFixed(2)}</span>
           ) : (
-            <span className="text-muted-foreground italic">Login to see price</span>
+            <span className="text-muted-foreground italic"></span>
           )}
           <Badge variant="outline">{product.category}</Badge>
         </div>
diff --git a/src/components/admin/DashboardOverview.tsx b/src/components/admin/DashboardOverview.tsx
index bae8960..2376191 100644
--- a/src/components/admin/DashboardOverview.tsx
+++ b/src/components/admin/DashboardOverview.tsx
@@ -1,6 +1,8 @@
 
 import React, { useEffect, useState } from 'react';
 import { Product, Order, Stats } from '@/types';
+import { Package, Users, DollarSign, Truck, Clock, PackageCheck, PackageX,Send,Loader } from "lucide-react";
+
 import {
   Table,
   TableBody,
@@ -83,46 +85,104 @@ const DashboardOverview: React.FC<DashboardOverviewProps> = ({
   return (
     <div className="space-y-8">
       <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
+
       <div className="bg-white p-6 rounded-lg shadow">
-          <h3 className="text-muted-foreground mb-1 text-sm">Products</h3>
-          <p className="text-3xl font-bold">{localStats.totalProducts?0:localStats.totalProducts}</p>
+        <div className="flex items-center justify-between">
+          <div>
+            <h3 className="text-muted-foreground mb-1 text-sm">Products</h3>
+            <p className="text-3xl font-bold">{!localStats.totalProducts ? 0 : localStats.totalProducts}</p>
+          </div>
+          <Package className="w-6 h-6 text-gray-400" />
         </div>
+      </div>
+
         <div className="bg-white p-6 rounded-lg shadow">
+        <div className="flex items-center justify-between">
+        <div>
           <h3 className="text-muted-foreground mb-1 text-sm">Total Users</h3>
           <p className="text-3xl font-bold">{localStats.totalUsers?0:localStats.totalUsers}</p>
+          </div>
+          <Users className="w-6 h-6 text-gray-400" />
+          </div>
         </div>
+
+
         <div className="bg-white p-6 rounded-lg shadow">
+        <div className="flex items-center justify-between">
+        <div>
           <h3 className="text-muted-foreground mb-1 text-sm">Total Sales</h3>
           <p className="text-3xl font-bold">${!localStats.totalSales?0:localStats.totalSales}</p>
+          </div>
+          <DollarSign className="w-6 h-6 text-gray-400" />
+            </div>
         </div>
+
+
+
+
         <div className="bg-white p-6 rounded-lg shadow">
+        <div className="flex items-center justify-between">
+        <div>
           <h3 className="text-muted-foreground mb-1 text-sm">Total Orders</h3>
           <p className="text-3xl font-bold">{!localStats.totalOrders?0:localStats.totalOrders}</p>
+          </div>
+          <Truck className="w-6 h-6 text-gray-400" />
+        </div>
         </div>
+
         <div className="bg-white p-6 rounded-lg shadow">
+        <div className="flex items-center justify-between">
+        <div>
           <h3 className="text-muted-foreground mb-1 text-sm">Total Pending Orders</h3>
           <p className="text-3xl font-bold">{!localStats.pendingOrders?0:localStats.shippedOrders}</p>
+          </div>
+          <Clock className="w-6 h-6 text-gray-400" />
         </div>
+        </div>
+
         <div className="bg-white p-6 rounded-lg shadow">
+        <div className="flex items-center justify-between">
+        <div>
           <h3 className="text-muted-foreground mb-1 text-sm">Total Processing Orders</h3>
           <p className="text-3xl font-bold">{!localStats.processingOrders?0:localStats.processingOrders}</p>
+          </div>
+          <Loader className="w-6 h-6 text-gray-400" />
         </div>
+        </div>
+
+
         <div className="bg-white p-6 rounded-lg shadow">
+        <div className="flex items-center justify-between">
+        <div>
           <h3 className="text-muted-foreground mb-1 text-sm">Total Shipped Orders</h3>
           <p className="text-3xl font-bold">{!localStats.shippedOrders?0:localStats.shippedOrders}</p>
+          </div>
+          <Send className="w-6 h-6 text-gray-400" />
         </div>
+        </div>
+
+
         <div className="bg-white p-6 rounded-lg shadow">
+        <div className="flex items-center justify-between">
+        <div>
           <h3 className="text-muted-foreground mb-1 text-sm">Total Delivered Orders</h3>
           <p className="text-3xl font-bold">{!localStats.deliveredOrders ? 0 :localStats.deliveredOrders }</p>
+          </div>
+          <PackageCheck className="w-6 h-6 text-gray-400" />
+        </div>
         </div>
+
+        
         <div className="bg-white p-6 rounded-lg shadow">
+        <div className="flex items-center justify-between">
+        <div>
           <h3 className="text-muted-foreground mb-1 text-sm">Total Cancelled Orders</h3>
           <p className="text-3xl font-bold">{!localStats.canceledOrders? 0:localStats.canceledOrders}</p>
         </div>
-       
-       
-       
-      </div>
+        <PackageX className="w-6 h-6 text-gray-400" />
+        </div>
+        </div>
+        </div>
       
       
       <div className="bg-white p-6 rounded-lg shadow w-full max-w-7xl h-[650px]">
diff --git a/src/components/admin/OrdersManagement.tsx b/src/components/admin/OrdersManagement.tsx
index 5fd0d28..af0ce79 100644
--- a/src/components/admin/OrdersManagement.tsx
+++ b/src/components/admin/OrdersManagement.tsx
@@ -300,7 +300,7 @@ const OrdersManagement: React.FC = () => {
   const [dateFilter, setDateFilter] = useState<DateRangeFilter>({});
   const [isCalendarOpen, setIsCalendarOpen] = useState(false);
   const [deletingOrderId, setDeletingOrderId] = useState<number | null>(null);
-
+ 
   const fetchOrders = async () => {
     setIsLoadingOrders(true);
     try {
@@ -469,6 +469,8 @@ const OrdersManagement: React.FC = () => {
               <RefreshCw className="h-4 w-4" />
               <span>Refresh</span>
             </Button>
+            
+
         </div>
       </div>
       <div className="mb-6 flex flex-col sm:flex-row gap-4">
diff --git a/src/components/admin/ProductsManagement.tsx b/src/components/admin/ProductsManagement.tsx
index 9b67559..0b45b97 100644
--- a/src/components/admin/ProductsManagement.tsx
+++ b/src/components/admin/ProductsManagement.tsx
@@ -654,7 +654,7 @@ import React, { useEffect, useState } from 'react';
 import { Product } from '@/types';
 import { Button } from '@/components/ui/button';
 import { Input } from '@/components/ui/input';
-import { productApi } from '@/services/apiService'; // Your API module
+import { globalApi, productApi } from '@/services/apiService'; // Your API module
 import { toast } from 'sonner';
 
 import {
@@ -693,7 +693,31 @@ const ProductsManagement: React.FC<ProductsManagementProps> = ({
  // const [product, setProducts] = useState<Product[]>([]);
   const [selectedImage, setSelectedImage] = useState(null);
   const [product, setProducts] = useState([]);
+  const [isOnoff, setisOnOff] = useState(false);
+  useEffect(() => {
+    const fetchStatus = async () => {
+      try {
+        const response = await globalApi.getStatus();
+        // Assuming response = { showPrice: true/false }
+        setisOnOff(response.showPrice || false);
+      } catch (error) {
+        console.error("Failed to fetch status:", error);
+      }
+    };
+
+    fetchStatus();
+  }, []);
+
+  const toggle = async () => {
+    const newStatus = !isOnoff;
+    setisOnOff(newStatus);
 
+    try {
+      await globalApi.setStatus(newStatus);
+    } catch (error) {
+      console.error("Failed to update status:", error);
+    }
+  }
   const handleImageChange = (event) => {
     const file = event.target.files[0];
     if (file) {
@@ -811,11 +835,29 @@ const ProductsManagement: React.FC<ProductsManagementProps> = ({
     <div className="p-4">
       <div className="flex justify-between items-center mb-4">
         <h2 className="text-2xl font-bold">Product Management</h2>
+        <div className="flex gap-3">
+        <div className="flex items-center gap-3">
+        <span className="text-lg font-semibold">Price Status</span>
+        <button
+          onClick={toggle}
+          className={`w-14 h-8 flex items-center rounded-full p-1 transition-all duration-300 ease-in-out
+            ${isOnoff ? 'bg-green-500' : 'bg-gray-300'}
+            focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 cursor-pointer active:scale-95`}
+        >
+          <div
+            className={`bg-white w-6 h-6 rounded-full shadow-md transform transition-transform duration-300 ${
+              isOnoff ? 'translate-x-6' : 'translate-x-0'
+            }`}
+          />
+        </button>
+      </div>
         <Button onClick={handleAddProduct}>
           <Plus className="w-4 h-4 mr-2" />
           Add Product
         </Button>
-      </div>
+             
+              </div>
+              </div>
       <div className="bg-white shadow rounded-lg overflow-hidden">
         <Table>
           <TableHeader>
diff --git a/src/config/dbConfig.ts b/src/config/dbConfig.ts
index 174a533..7f4902c 100644
--- a/src/config/dbConfig.ts
+++ b/src/config/dbConfig.ts
@@ -2,6 +2,6 @@
 // Database configuration
 // Replace these values with your actual database connection details
 export const dbConfig = {
-   apiUrl: 'http://localhost:3000/api', // API URL for your local Node.js server
-  //apiUrl: 'https://my-website-react-and-node-js-z1jd.onrender.com/api',
+   //apiUrl: 'http://localhost:3000/api', // API URL for your local Node.js server
+  apiUrl: 'https://my-website-react-and-node-js-z1jd.onrender.com/api',
 };
diff --git a/src/pages/ProductDetail.tsx b/src/pages/ProductDetail.tsx
index d9833be..2edfcf1 100644
--- a/src/pages/ProductDetail.tsx
+++ b/src/pages/ProductDetail.tsx
@@ -7,7 +7,7 @@ import { getProductById } from '@/data/products';
 import { useCart } from '@/context/CartContext';
 import { useAuth } from '@/context/AuthContext';
 import { Badge } from '@/components/ui/badge';
-import { authApi, cartApi, productApi } from '@/services/apiService';
+import { authApi, cartApi, globalApi, productApi } from '@/services/apiService';
 import { Product } from '@/types';
 
 const ProductDetail = () => {
@@ -17,6 +17,20 @@ const ProductDetail = () => {
   const { user } = useAuth();
   const [isAdding, setIsAdding] = useState(false);
   const [product, setProduct] = useState<Product | null>(null);
+  const [isOnoff, setisOnOff] = useState(false);
+  useEffect(() => {
+    const fetchStatus = async () => {
+      try {
+        const response = await globalApi.getStatus();
+        // Assuming response = { showPrice: true/false }
+        setisOnOff(response.showPrice || false);
+      } catch (error) {
+        console.error("Failed to fetch status:", error);
+      }
+    };
+
+    fetchStatus();
+  }, []);
   const handleAddToCart = async () => {
     if (!product) return;
     const token = localStorage.getItem('authToken');
@@ -80,13 +94,12 @@ const ProductDetail = () => {
             </Badge>
           </div>
           
-          {user ? (
+          {isOnoff ? (
             <div className="text-2xl font-bold text-primary">
               ${product.price}
             </div>
           ) : (
             <div className="text-muted-foreground italic">
-              Login to see price
             </div>
           )}
           
diff --git a/src/services/apiService.ts b/src/services/apiService.ts
index 53a89a2..6e0035f 100644
--- a/src/services/apiService.ts
+++ b/src/services/apiService.ts
@@ -275,3 +275,17 @@ export const orderApi = {
       }),
 
 };
+export const globalApi=
+{
+
+getStatus:()=>apiRequest('global/getpriceState'),
+
+setStatus:(status:boolean)=>apiRequest('global/putpriceState',
+  {
+    method: 'PUT',
+    body: JSON.stringify({ status }),
+  }
+)
+
+
+};
\ No newline at end of file
-- 
2.45.1.windows.1

